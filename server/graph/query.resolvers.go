package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"ordo-map/graph/gentypes"
	"ordo-map/graph/model"
)

// Character is the resolver for the character field.
func (r *queryResolver) Character(ctx context.Context, id string) (*model.Character, error) {
	panic(fmt.Errorf("not implemented: Character - character"))
}

// Characters is the resolver for the characters field.
func (r *queryResolver) Characters(ctx context.Context, worldID string, limit *int, offset *int) ([]*model.Character, error) {
	panic(fmt.Errorf("not implemented: Characters - characters"))
}

// Creature is the resolver for the creature field.
func (r *queryResolver) Creature(ctx context.Context, id string) (*model.Creature, error) {
	panic(fmt.Errorf("not implemented: Creature - creature"))
}

// Creatures is the resolver for the creatures field.
func (r *queryResolver) Creatures(ctx context.Context, worldID string, limit *int, offset *int) ([]*model.Creature, error) {
	panic(fmt.Errorf("not implemented: Creatures - creatures"))
}

// Item is the resolver for the item field.
func (r *queryResolver) Item(ctx context.Context, id string) (*model.Item, error) {
	panic(fmt.Errorf("not implemented: Item - item"))
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context, worldID string, limit *int, offset *int) ([]*model.Item, error) {
	panic(fmt.Errorf("not implemented: Items - items"))
}

// Location is the resolver for the location field.
func (r *queryResolver) Location(ctx context.Context, id string) (*model.Location, error) {
	panic(fmt.Errorf("not implemented: Location - location"))
}

// Locations is the resolver for the locations field.
func (r *queryResolver) Locations(ctx context.Context, worldID string, limit *int, offset *int) ([]*model.Location, error) {
	panic(fmt.Errorf("not implemented: Locations - locations"))
}

// Faction is the resolver for the faction field.
func (r *queryResolver) Faction(ctx context.Context, id string) (*model.Faction, error) {
	panic(fmt.Errorf("not implemented: Faction - faction"))
}

// Factions is the resolver for the factions field.
func (r *queryResolver) Factions(ctx context.Context, worldID string, limit *int, offset *int) ([]*model.Faction, error) {
	panic(fmt.Errorf("not implemented: Factions - factions"))
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, worldID string, limit *int, offset *int) ([]*model.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// World is the resolver for the world field.
func (r *queryResolver) World(ctx context.Context, id string) (*model.World, error) {
	panic(fmt.Errorf("not implemented: World - world"))
}

// Worlds is the resolver for the worlds field.
func (r *queryResolver) Worlds(ctx context.Context, universeID string, limit *int, offset *int) ([]*model.World, error) {
	panic(fmt.Errorf("not implemented: Worlds - worlds"))
}

// Universe is the resolver for the universe field.
func (r *queryResolver) Universe(ctx context.Context, id string) (*model.Universe, error) {
	panic(fmt.Errorf("not implemented: Universe - universe"))
}

// Universes is the resolver for the universes field.
func (r *queryResolver) Universes(ctx context.Context, limit *int, offset *int) ([]*model.Universe, error) {
	panic(fmt.Errorf("not implemented: Universes - universes"))
}

// Query returns gentypes.QueryResolver implementation.
func (r *Resolver) Query() gentypes.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
