package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"ordo-map/graph/gentypes"
	"ordo-map/graph/model"
)

// CreateCharacter is the resolver for the createCharacter field.
func (r *mutationResolver) CreateCharacter(ctx context.Context, input model.CreateCharacterInput) (*model.Character, error) {
	panic(fmt.Errorf("not implemented: CreateCharacter - createCharacter"))
}

// UpdateCharacter is the resolver for the updateCharacter field.
func (r *mutationResolver) UpdateCharacter(ctx context.Context, input model.UpdateCharacterInput) (*model.Character, error) {
	panic(fmt.Errorf("not implemented: UpdateCharacter - updateCharacter"))
}

// DeleteCharacter is the resolver for the deleteCharacter field.
func (r *mutationResolver) DeleteCharacter(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCharacter - deleteCharacter"))
}

// CreateCreature is the resolver for the createCreature field.
func (r *mutationResolver) CreateCreature(ctx context.Context, input model.CreateCreatureInput) (*model.Creature, error) {
	panic(fmt.Errorf("not implemented: CreateCreature - createCreature"))
}

// UpdateCreature is the resolver for the updateCreature field.
func (r *mutationResolver) UpdateCreature(ctx context.Context, input model.UpdateCreatureInput) (*model.Creature, error) {
	panic(fmt.Errorf("not implemented: UpdateCreature - updateCreature"))
}

// DeleteCreature is the resolver for the deleteCreature field.
func (r *mutationResolver) DeleteCreature(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCreature - deleteCreature"))
}

// CreateItem is the resolver for the createItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, input model.CreateItemInput) (*model.Item, error) {
	panic(fmt.Errorf("not implemented: CreateItem - createItem"))
}

// UpdateItem is the resolver for the updateItem field.
func (r *mutationResolver) UpdateItem(ctx context.Context, input model.UpdateItemInput) (*model.Item, error) {
	panic(fmt.Errorf("not implemented: UpdateItem - updateItem"))
}

// DeleteItem is the resolver for the deleteItem field.
func (r *mutationResolver) DeleteItem(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteItem - deleteItem"))
}

// CreateLocation is the resolver for the createLocation field.
func (r *mutationResolver) CreateLocation(ctx context.Context, input model.CreateLocationInput) (*model.Location, error) {
	panic(fmt.Errorf("not implemented: CreateLocation - createLocation"))
}

// UpdateLocation is the resolver for the updateLocation field.
func (r *mutationResolver) UpdateLocation(ctx context.Context, input model.UpdateLocationInput) (*model.Location, error) {
	panic(fmt.Errorf("not implemented: UpdateLocation - updateLocation"))
}

// DeleteLocation is the resolver for the deleteLocation field.
func (r *mutationResolver) DeleteLocation(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteLocation - deleteLocation"))
}

// CreateFaction is the resolver for the createFaction field.
func (r *mutationResolver) CreateFaction(ctx context.Context, input model.CreateFactionInput) (*model.Faction, error) {
	panic(fmt.Errorf("not implemented: CreateFaction - createFaction"))
}

// UpdateFaction is the resolver for the updateFaction field.
func (r *mutationResolver) UpdateFaction(ctx context.Context, input model.UpdateFactionInput) (*model.Faction, error) {
	panic(fmt.Errorf("not implemented: UpdateFaction - updateFaction"))
}

// DeleteFaction is the resolver for the deleteFaction field.
func (r *mutationResolver) DeleteFaction(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteFaction - deleteFaction"))
}

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.CreateEventInput) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: CreateEvent - createEvent"))
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, input model.UpdateEventInput) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: UpdateEvent - updateEvent"))
}

// DeleteEvent is the resolver for the deleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteEvent - deleteEvent"))
}

// CreateWorld is the resolver for the createWorld field.
func (r *mutationResolver) CreateWorld(ctx context.Context, input model.CreateWorldInput) (*model.World, error) {
	panic(fmt.Errorf("not implemented: CreateWorld - createWorld"))
}

// UpdateWorld is the resolver for the updateWorld field.
func (r *mutationResolver) UpdateWorld(ctx context.Context, input model.UpdateWorldInput) (*model.World, error) {
	panic(fmt.Errorf("not implemented: UpdateWorld - updateWorld"))
}

// DeleteWorld is the resolver for the deleteWorld field.
func (r *mutationResolver) DeleteWorld(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteWorld - deleteWorld"))
}

// CreateUniverse is the resolver for the createUniverse field.
func (r *mutationResolver) CreateUniverse(ctx context.Context, input model.CreateUniverseInput) (*model.Universe, error) {
	panic(fmt.Errorf("not implemented: CreateUniverse - createUniverse"))
}

// UpdateUniverse is the resolver for the updateUniverse field.
func (r *mutationResolver) UpdateUniverse(ctx context.Context, input model.UpdateUniverseInput) (*model.Universe, error) {
	panic(fmt.Errorf("not implemented: UpdateUniverse - updateUniverse"))
}

// DeleteUniverse is the resolver for the deleteUniverse field.
func (r *mutationResolver) DeleteUniverse(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUniverse - deleteUniverse"))
}

// Mutation returns gentypes.MutationResolver implementation.
func (r *Resolver) Mutation() gentypes.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
